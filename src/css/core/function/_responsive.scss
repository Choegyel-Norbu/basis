//
// Return min size.
// If $size is key of $_size, return that value.
// If $size is number, return this.
//
// @param  size|length  $size
// @return length|false
//
@function _min($size) {
  @if (null != map-get($_sizes, $size)) {
    @return map-get($_sizes, $size);
  } @else if ('number' == type-of($size)) {
    @return $size;
  }
  @return false;
}

//
// Return max size.
// If $size is key of $_size, return that max value.
// If $size is number, return this.
//
// @param  size|length  $size
// @return length|false
//
@function _max($size) {
  $next_size: _next-size-key($size);
  @if (false != $next_size) {
    @return (calc(#{map-get($_sizes, $next_size)} - 1px));
  } @else if ('number' == type-of($size)) {
    @return $size;
  }
  @return false;
}

//
// Return prev key of $_size
//
// @param  size  $size
// @return size
//
@function _prev-size-key($size) {
  $prev: false;
  @each $key, $value in $_sizes {
    @if ($key == $size) {
      @return $prev;
    }
    $prev: $key;
  }
  @return false;
}

//
// Return next key of $_size
//
// @param  size  $size
// @return size
//
@function _next-size-key($size) {
  $next: false;
  @each $key, $value in $_sizes {
    @if ($key == $size) {
      $next: $key;
    } @else if (false != $next) {
      @return $key;
    }
  }
  @return false;
}
